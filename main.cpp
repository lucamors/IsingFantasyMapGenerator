#include <string>
#include <iostream>
#include <unistd.h>
#include "utils.hh"
#include "map.hh"
#include "renderer.hh"
#include "spin_lattice.hh"

int main() {

    // Print program name and version
    splash_screen();

    int N = 500;

    for(int l = 1; l <= 100; l++)
    {

        // Declare a spin lattice object 
        SpinLattice lattice = SpinLattice(N);

        // Annealing procedure
        std::cout << std::endl << "Starting annealing procedure for map #" << l << std::endl;
        lattice.anneal(190000000);
        
        // Remove noisy pixel by "freezing" the lattice
        std::cout << std::endl << "Freezing the lattice: " << std::endl;
        lattice.freeze();

        // declare a map object starting from the sea/terrain pattern
        // generated by the Ising Lattice
        std::cout << std::endl << "Generating heightmap from spin lattice:" << std::endl;
        Map map = Map(&lattice);

        // generating amenities on map using the heightmap
        // Generate a set of rivers
        std::cout << std::endl << "Generating rivers . . ." << std::endl;
        for (size_t i = 0; i < 30; i++)
        {
            map.generate_river();
        }

        std::cout << "Generating mountains . . ." << std::endl;
        for (size_t i = 0; i < 150; i++)
        {
            map.generate_mountain();
        }
        

        std::cout << "Generating trees . . ." << std::endl;
        for (size_t i = 0; i < 700; i++)
        {
            map.generate_tree();
        }

        // Render the map
        std::cout << "Rendering the map . . ." << std::endl;
        Renderer renderer = Renderer();

        std::string filename = "maps/map"+std::to_string(l)+".bmp";
        renderer.render(&map, filename);

        char buffer[200];
        getcwd(buffer, sizeof(buffer));
        
        std::cout << "Map saved into " << buffer << "/" << filename << std::endl;

    }
    return 0;
}
